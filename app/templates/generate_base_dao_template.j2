from sqlalchemy.orm import Session
from sqlalchemy import func
from typing import List, Optional, Union, Any
from app.daos.base.base_dao import BaseDao
from app.models.models import {{ model_class }}

{% set datetime_imports = [] %}
{% if 'datetime' in imports %}{% set _ = datetime_imports.append('datetime') %}{% endif %}
{% if 'date' in imports %}{% set _ = datetime_imports.append('date') %}{% endif %}
{% if 'time' in imports %}{% set _ = datetime_imports.append('time') %}{% endif %}
{% if datetime_imports %}
from datetime import {{ datetime_imports | join(', ') }}
{% endif %}

class {{ base_dao_class_name }}(BaseDao[{{ model_class }}]):
    """
    Data Access Object for {{ model_class }}.
    Provides CRUD operations and utility methods for {{ model_class }} table.
    """
    model = {{ model_class }}

    def create(
        self,
        db_session: Session,
        data: Union[{{ model_class }}, dict]
    ) -> {{ model_class }}:
        """
        Create a new {{ model_class }} record in the database.

        Args:
            db_session (Session): SQLAlchemy database session.
            data (Union[{{ model_class }}, dict]): Data to create the record. Accepts model instance or dictionary.

        Returns:
            {{ model_class }}: The created {{ model_class }} instance.

        Raises:
            RuntimeError: If the creation fails.
        """
        try:
            instance = {{ model_class }}(**data) if isinstance(data, dict) else data
            db_session.add(instance)
            db_session.flush()
            return instance
        except Exception as e:
            db_session.rollback()
            raise RuntimeError(f"[DAO.create] Failed to create: {e}") from e

    def delete(
        self,
        db_session: Session,
        instance: {{ model_class }}
    ) -> None:
        """
        Delete the specified {{ model_class }} instance from the database.

        Args:
            db_session (Session): SQLAlchemy database session.
            instance ({{ model_class }}): The instance to be deleted.

        Returns:
            None

        Raises:
            RuntimeError: If the deletion fails.
        """
        try:
            db_session.delete(instance)
            db_session.flush()
        except Exception as e:
            db_session.rollback()
            raise RuntimeError(f"[DAO.delete] Failed to delete: {e}") from e

    def get_by_key(
        self,
        db_session: Session,
        {% for pk in pk_fields %}
        {{ pk.name }}: Optional[{{ pk.type|default('Any') }}]{% if not loop.last %}, {% endif %}
        {% endfor %}
    ) -> List[{{ model_class }}]:
        """
        Retrieve records matching the given primary key conditions.

        Args:
            db_session (Session): SQLAlchemy database session.
            {% for pk in pk_fields %}
            {{ pk.name }} (Optional[{{ pk.type|default('Any') }}]): Primary key field.
            {% endfor %}

        Returns:
            List[{{ model_class }}]: List of matching records.
        """
        query = db_session.query({{ model_class }})
        {% for pk in pk_fields %}
        if {{ pk.name }} is not None:
            query = query.filter({{ model_class }}.{{ pk.name }} == {{ pk.name }})
        {% endfor %}
        return query.all()

    def get(
        self,
        db_session: Session,
        {% for pk in pk_fields %}
        {{ pk.name }}: Optional[{{ pk.type|default('Any') }}]{% if not loop.last %}, {% endif %}
        {% endfor %}
    ) -> Optional[{{ model_class }}]:
        """
        Retrieve a single record by primary key.

        Args:
            db_session (Session): SQLAlchemy database session.
            {% for pk in pk_fields %}
            {{ pk.name }} (Optional[{{ pk.type|default('Any') }}]): Primary key field.
            {% endfor %}

        Returns:
            Optional[{{ model_class }}]: The matched record, or None if not found.
        """
        result = self.get_by_key(
            db_session
            {% for pk in pk_fields %}, {{ pk.name }}={{ pk.name }}{% endfor %}
        )
        return result[0] if result else None

    def get_all(
        self,
        db_session: Session,
        limit: int = 100,
        offset: int = 0
    ) -> List[{{ model_class }}]:
        """
        Retrieve all records with optional pagination.

        Args:
            db_session (Session): SQLAlchemy database session.
            limit (int): Maximum number of records to retrieve.
            offset (int): Starting position of the query.

        Returns:
            List[{{ model_class }}]: List of retrieved records.
        """
        return db_session.query({{ model_class }}).limit(limit).offset(offset).all()

    def count(
        self,
        db_session: Session
    ) -> int:
        """
        Count total number of records in the table.

        Args:
            db_session (Session): SQLAlchemy database session.

        Returns:
            int: Total number of records.
        """
        return db_session.query(func.count()).select_from({{ model_class }}).scalar()

    def update(
        self,
        db_session: Session,
        {% for pk in pk_fields %}
        {{ pk.name }}: Optional[{{ pk.type|default('Any') }}]{% if not loop.last %}, {% endif %}
        {% endfor %},
        update_data: dict
    ) -> Optional[{{ model_class }}]:
        """
        Update a record matching the given primary key with provided data.

        Args:
            db_session (Session): SQLAlchemy database session.
            {% for pk in pk_fields %}
            {{ pk.name }} (Optional[{{ pk.type|default('Any') }}]): Primary key field.
            {% endfor %}
            update_data (dict): Fields to update and their new values.

        Returns:
            Optional[{{ model_class }}]: The updated instance, or None if not found.
        """
        results = self.get_by_key(
            db_session
            {% for pk in pk_fields %}, {{ pk.name }}={{ pk.name }}{% endfor %}
        )
        instance = results[0] if results else None
        if instance:
            for key, value in update_data.items():
                setattr(instance, key, value)
            db_session.add(instance)
            db_session.flush()
        return instance
