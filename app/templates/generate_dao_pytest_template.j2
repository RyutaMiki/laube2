PYTEST_TEMPLATE = '''\
import pytest
from sqlalchemy.orm import Session
from app.daos.models.models import {{ model_class }}
from app.daos.{{ model_lower }}_dao import {{ dao_class_name }}
from datetime import datetime, date, time
{{ enum_imports }}

@pytest.fixture
def {{ model_lower }}_dict():
    return {
        {%- for col in columns %}
        "{{ col.name }}": {{ col.example }}{% if not loop.last %},{% endif %}
        {%- endfor %}
    }

def test_create_and_get_{{ model_lower }}(db_session: Session, {{ model_lower }}_dict):
    dao = {{ dao_class_name }}()
    obj = dao.create(db_session, {{ model_lower }}_dict)
    found = dao.get(db_session, {{ pk_args }})
    assert found is not None

def test_update_{{ model_lower }}(db_session: Session, {{ model_lower }}_dict):
    dao = {{ dao_class_name }}()
    obj = dao.create(db_session, {{ model_lower }}_dict)
    dao.update(db_session, {{ pk_args }}, {"{{ update_col }}": "updated"})
    updated = dao.get(db_session, {{ pk_args }})
    assert updated.{{ update_col }} == "updated"

def test_delete_{{ model_lower }}(db_session: Session, {{ model_lower }}_dict):
    dao = {{ dao_class_name }}()
    obj = dao.create(db_session, {{ model_lower }}_dict)
    dao.delete(db_session, obj)
    deleted = dao.get(db_session, {{ pk_args }})
    assert deleted is None
